htmlCode
htmlCode
5+5
5+8
rm(list = ls())
library(swirl)
swirl()
head(airq)
head(airquality)
xyplot(Ozone ~ Wind,data = airquality)
xyplot(Ozone ~ Wind,data = airquality,col = "red",pch = 8,main = "Big Apple Data")
xyplot(Ozone ~ Wind,data = airquality,pch = 8,col = "red",main = "Big Apple Data")
xyplot(Ozone ~ Wind | as.factor(Month),data = airquality,layout = c(5,1))
xyplot(Ozone ~ Wind | Month,data = airquality,layout = c(5,1))
p <- xyplot(Ozone ~ Wind,data = airquality)
print(p)
names(p)
mynames[myfull]
p[["formula"]]
p[["x.limits"]]
table(f)
xyplot(y ~ x | f)
xyplot(y ~ x | f,layout = c(2,1))
v1
v2
myedit("plot1.R")
pathtofile(fileName = "plot1.R",local = T)
source("plot1.R",local = T)
source(file = pathtofile("plot1.R"),local = T)
source(file = pathtofile("plot1.R"),local = TRUE)
myedit("plot2.R")
panel.xyplot(x, y, ...)  ## First call default panel function
panel.lmline(x, y, col = 2)  ## Overlay a simple linear regression line
})
source(pathtofile("plot2.R"),local = TRUE)
str(diamonds)
table(diamonds$color)
table(diamonds$color,diamonds$cut)
myedit("myLabels.R")
source(pathtofile("myLabels.R")local = TRUE)
source(pathtofile("myLabels.R"),local = TRUE)
xyplot(price ~ carat | color*cut,data = diamonds,strip = FALSE,pch = 20, xlab = "myxlab",
ylab = "myylab",main = "mymain")
xyplot(price ~ carat | color*cut,data = diamonds,strip = FALSE,pch = 20, xlab = myxlab,
ylab = myylab,main = mymain)
xyplot(price ~ carat | color*cut,data = diamonds,pch = 20, xlab = myxlab,
ylab = myylab,main = mymain)
sample(colors(),10)
pal = colorRamp(colors = c("red","blue"))
pal <- colorRamp(colors = c("red","blue"))
pal(0)
pal(1)
pal(seq(0,1,len = 6))
p1 <- colorRampPalette(c("red","blue"))
p1(2)
p1(seq(0,1,len = 6))
p1(6)
0xcc
ps <- colorRampPalette(c("red","yellow"))
p2 <- colorRampPalette(c("red","yellow"))
p2(2)
p2(10)
showMe(p1(20))
showMe(p2(20))
showMe(p2(2))
p1
?fun
?rgb
p3 <- colorRampPalette(c("blue","green"),alpha = 0.5)
p3(5)
plot(x,y, pch = 19,col = rgb(red = 0,green = 0.5,blue = 0.5))
plot(x,y, pch = 19,col = rgb(red = 0,green = 0.5,blue = 0.5,alpha = 0.3))
cols <-brewer.pal(n = 3,name = "BuGn")
cols
showMe(cols)
pla <- colorRampPalette(colors = cols)
pla <- colorRampPalette(cols)
pal <- colorRampPalette(cols)
showMe(pal(20))
image(x = volcano,col = pla(20))
image(volcano,col = pla(20))
image(volcano,col = pal(20))
image(volcano,col = p1(20))
str(mpg)
qplot(x = displ,y = hwy,data = mpg)
qplot(x = displ,y = hwy,data = mpg,color = drv)
qplot(x = displ,y = hwy,data = mpg,color = drv,fifth = c("point","smooth"))
qplot(x = displ,y = hwy,data = mpg,color = drv,geom = c("point","smooth"))
qplot(y = hwy,data = mpg,color = drv)
head(myhigh)
myhigh
qplot(by,data = mog)
qplot(by,data = mpg)
qplot(drv,hwy,data = mpg,geom = "boxplot")
qplot(drv,hwy,data = mpg,geom = "boxplot",color = manufacturer)
qplot(hwy,data = mpg,aesthetic = drv)
qplot(hwy,data = mpg,fill = drv)
qplot(x = dspl,y = hwy,data = mpg,facets = .~ drv)
qplot(x = displ,y = hwy,data = mpg,facets = .~ drv)
qplot(x = hwy,data = mpg,facets = drv ~ .,binwidth = 2)
qplot(x = displ ~ hwy,data = mpg,geom = c("point","smooth"))
qplot(x = displ,y = hwy,data = mpg,geom = c("point","smooth"),facets = .~drv)
g <- ggplot(data = mpg,displ,aes(x = displ,y = hwy))
g <- ggplot(data = mpg,displ ~ hwy)
g <- ggplot(data = mpg,aes(x = displ,y = hwy))
summary(g)
g + geom_point()
g + geom_point() + geom_smooth()
g + geom_point() + geom_smooth(method = "lm")
g + geom_point() + geom_smooth(method = "lm") + facet_grid(facets = . ~ drv)
g + geom_point() + geom_smooth(method = "lm") + facet_grid(facets = . ~ drv) + ggtitle("Swirl Rules!")
g <- ggplot(data = mpg,aes(x = displ,y = hwy)) + geom_point(color = "pink",size = 4, alpha = 1/2)
g + geom_point(color = "pink",size = 4, alpha = 1/2)
g + geom_point(size = 4, alpha = 1/2, aes(color = drv))
g + geom_point(aes(color = drv),labs(title = "Swirl Rules!"),labs = (x = "Displacement",y = "Hwy Mileage"))
g + geom_point(aes(color = drv),labs(title = "Swirl Rules!"),labs(x = "Displacement",y = "Hwy Mileage"))
g + geom_point(aes(color = drv),labs(title = "Swirl Rules!"))
g + geom_point(aes(color = drv,labs(title = "Swirl Rules!")))
g + geom_point(aes(color = drv),labs(title = "Swirl Rules!"))
g + geom_point(aes(color = drv))
g + geom_point(aes(color = drv)) + labs(title = "Swirl Rules!") + labs(x = "Displacement",y = "Hwy Mileage")
g + geom_point(aes(color = drv),size = 2, aplha = 1/2) + geom_smooth(size = 4, linetype = 3,method = "lm",
se = FALSE)
g + geom_point(aes(color = drv),size = 2, alpha = 1/2) + geom_smooth(size = 4, linetype = 3,method = "lm",
se = FALSE)
g + theme_bw(base_family = "Times")
g + geom_point(aes(color = drv),size = 2, alpha = 1/2) + theme_bw(base_family = "Times")
g + geom_point(aes(color = drv)) + theme_bw(base_family = "Times")
plot(x = myx,y = myy,type = "l",ylim = c(-3,3))
g <- ggplot(data = testdat,aes(x = myx,y = myy))
g + geom_line()
g + geom_line(ylim(-3,3))
g + geom_line(aes(ylim(-3,3)))
g + geom_line(aes(ylim = c(-3,3)))
g + geom_line()
g + geom_line() + ylim(-3,3)
g + geom_line() + coord_cartesian(ylim = c(-3,3))
g + geom_line() + coord_cartesian(ylim = c(-3,3))
g <- ggplot(mpg,aes(x = displ,y = hwy,color = factor(year)))
g <- g + geom_point()
g <- ggplot(mpg,aes(x = displ,y = hwy,color = factor(year)))
g + geom_point()
g + geom_point() + facet_grid(drv ~ cyl,equal = TRUE)
g + geom_point() + facet_grid(drv ~ cyl,margins = TRUE)
g + geom_point() + facet_grid(drv ~ cyl,margins = TRUE) + geom_smooth(size = 2,linetype = 3,method = "lm",
se = FALSE, color = "black")
g + geom_point() + facet_grid(drv~cyl,margins=TRUE)+geom_smooth(method="lm",size=2,se=FALSE,color="black")
g + geom_point() + facet_grid(drv~cyl,margins=TRUE)+geom_smooth(method="lm",size=2,se=FALSE,color="black") +
labs(x = "Displacement", y = "Highway Milage", title = "Swirl Rules|")
g + geom_point() + facet_grid(drv~cyl,margins=TRUE)+geom_smooth(method="lm",size=2,se=FALSE,color="black") +
labs(x = "Displacement", y = "Highway Mileage", title = "Swirl Rules|")
Typeg + geom_point() + facet_grid(drv~cyl,margins=TRUE)+geom_smooth(method="lm",size=2,se=FALSE,color="black") +
labs(x = "Displacement", y = "Highway Mileage", title = "Swirl Rules|")
g + geom_point() +
facet_grid(drv~cyl,margins=TRUE)+geom_smooth(method="lm",size=2,se=FALSE,color="black")+labs(x="Displacement",y="Highway Mileage",
title="Swirl Rules!")
str(diamonds)
qplot(x = price,data = diamonds)
range(diamonds$price)
qplot(price,data = diamonds,binwidth = 18497/30)
brk
counts
qplot(price,data = diamonds,binwidth = 18497/30,fill = cut)
qplot(price,data = diamonds,geom = "density")
qplot(price,data = diamonds,geom = "density",color = cut)
qplot(x = carat,y = prince,data = diamonds)
qplot(x = carat,y = price,data = diamonds)
qplot(x = carat,y = price,data = diamonds,shape = cut)
qplot(x = carat,y = price,data = diamonds,color = cut)
qplot(x = carat,y = price,data = diamonds,color = cut,geom_smooth(method = "lm"))
qplot(x = carat,y = price,data = diamonds,color = cut) + geom_smooth(method = "lm"))
qplot(x = carat,y = price,data = diamonds,color = cut) + geom_smooth(method = "lm")
qplot(x = carat,y = price,data = diamonds,color = cut,facets = .~cut) + geom_smooth(method = "lm")
g <- ggplot(data = diamonds,aes(x = depth,y = price))
summary(g)
g + geom_point(alpha = 1/3)
cutpoints <- quantile(x = diamonds$carat,probs = seq(0,1,length = 4),na.rm = T)
cutpoints <- quantile(x = diamonds$carat,probs = seq(0,1,length = 4),na.rm = TRUE)
cutpoints
diamonds$carat2 <- cut(x = diamonds$carat,breaks = cutpoints)
diamonds$carat2 <- cut(x = diamonds$carat,cutpoints)
diamonds$carat2 <- cut(diamonds$carat,cutpoints)
diamonds$car2 <- cut(diamonds$carat,cutpoints)
g <- ggplot(data = diamonds,aes(depth,price))
g + geom_point(alpha = 1/3) + facet_grid(cut ~ car2)
diamonds[myd,]
g + geom_point(alpha = 1/3) + facet_grid(cut ~ car2) + geom_smooth(method = "lm",size = 3,color = "pink")
g <- ggplot(data = diamonds,aes(carat,price)) + geom_boxplot(), facet_grid(. ~ cut)
g <- ggplot(data = diamonds,aes(carat,price)) + geom_boxplot() + facet_grid(. ~ cut)
ggplot(data = diamonds,aes(carat,price)) + geom_boxplot() + facet_grid(. ~ cut)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
head(BodyWeight)
library(datasets)
data(airquality)
sapply(airquality,class)
qplot(x = Ozone,y = Wind,data = airquality,facets = .~factor(Month))
airquality2 = transform(airquality, Month = factor(Month))
sapply(airquality2, class)
head(airquality2)
qplot(Wind, Ozone, data = airquality2, facets = . ~ Month)
qplot(x = Wind,y = Ozone,data = airquality,facets = .~factor(Month))
qplot(Wind, Ozone, data = airquality2, facets = . ~ Month)
qplot(votes, rating, data = movies)
library(ggplot2)
qplot(votes, rating, data = movies)
library(ggplot2movies)
require(ggplot2movies)
require("ggplot2movies")
install.packages("ggplot2movies")
library(ggplot2movies)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + geom_smooth()
library(swirl)
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags,class)
cls_list
class(cls_list)
}as.character(cls_list)
as.character(cls_list)
sapply(flags,class)
cls_vect <- sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
sapply(flag_colors,sum)/194
flag_shapes <- flags[,19:23]
lapply(flag_shapes,range)
shape_mat <- sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals,function(elem) elem[2])
sapply(flags, unique)
ok()
sapply(flags, unique)
sapply(flags, class)
vapply(flags,class,character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate,flags$landmass,mean)
tapply(X = flags$population,flags$red,summary)
tapply(X = flags$population,flags$landmass,summary)
library(datasets)
rm(list = ls())
data("iris")
head(iris)
table(iris$Species)
tapply(iris$Sepal.Length,iris$Species,mean)
round(tapply(iris$Sepal.Length,iris$Species,mean),1)
apply(X = iris[,1:4],MARGIN = 2,mean)
data("mtcars")
head(mtcars)
tapply(mtcars$mpg, mtcars$cyl, mean)
sapply(mtcars, cyl, mean)
with(mtcars, tapply(mpg, cyl, mean))
sapply(split(mtcars$mpg, mtcars$cyl), mean)
round(tapply(iris$Sepal.Length,iris$Species,mean),0)
?mtcars
with(mtcars, tapply(hp, cyl, mean))
with(mtcars, tapply(hp, cyl, mean))[3]
round(with(mtcars, tapply(hp, cyl, mean))[3] - with(mtcars, tapply(hp, cyl, mean))[1],0)
debug(ls)
ls
install.packages("profvis")
#install.packages("profvis")
library(profvis)
data(diamonds,package = "ggplot2")
rm(list = ls())
#install.packages("profvis")
library(profvis)
data(diamonds,package = "ggplot2")
plot(price ~ carat,data = diamonds)
m = lm(price ~ carat, data = diamonds)
abline(m,col= "red")
rm(list = ls())
profvis(expr = {
data(diamonds,package = "ggplot2")
plot(price ~ carat,data = diamonds)
m = lm(price ~ carat, data = diamonds)
abline(m,col= "red")
})
rm(list = ls())
profvis({
data <- data.frame(value = runif(3e4))
data$sum[1] <- data$value[1]
for (i in seq(2, nrow(data))) {
data$sum[i] <- data$sum[i-1] + data$value[i]
}
})
rm(list = ls())
profvis({
csum <- function(x) {
if (length(x) < 2) return(x)
sum <- x[1]
for (i in seq(2, length(x))) {
sum[i] <- sum[i-1] + x[i]
}
sum
}
data$sum <- csum(data$value)
})
rm(list = ls())
profvis({
data <- data.frame(value = runif(3e4))
csum <- function(x) {
if (length(x) < 2) return(x)
sum <- x[1]
for (i in seq(2, length(x))) {
sum[i] <- sum[i-1] + x[i]
}
sum
}
data$sum <- csum(data$value)
})
set.seed(1)
rpois(5, 2)
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
Rprof(tmp <- tempfile())
example(glm)
Rprof()
summaryRprof(tmp)
Rprof(tmp <- tempfile())
library(datasets)
Rprof()
system.time()
library(swirl)
swirl()
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants,n = 10)
tail(plants,n = 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6,4,replace = T)
sample(1:6,4,replace = TRUE)
sample(1:6,4,replace = TRUE)
sample(1:20,10,replace = FALSE)
sample(1:20,10)
LETTERS
sample(LETTERS)
sample(c(0,1),prob = c(0.3,0.7))
sample(c(0,1),100,replace = TRUE,prob = c(0.3,0.7))
flips = sample(c(0,1),100,replace = TRUE,prob = c(0.3,0.7))
flips <- sample(c(0,1),100,replace = TRUE,prob = c(0.3,0.7))
flips
sum(flips)
?rbinom
rbinom(n = 1,size = 100,prob = 0.7)
swirl()
flips2 <- sample(c(0,1),100,replace = TRUE,prob = c(0.3,0.7))
flips2 <- rbinom(n = 100,size = 1,prob = 0.7)
head(flips2)
flips2
sum(flips2)
?rbinom
?rnorm
rnorm(10)
rnorm(10,mean = 100)
rnorm(10,mean = 100,sd = 25)
rpois(n = 5,lambda = 10)
my_pois <- rpois(n = 5,lambda = lambda)
my_pois <- replicate(n = 5,lambda = lambda)
my_pois <- replicate(n = 100,rpois(5,10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
data("cars")
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x = cars$speed,y = cars$dist)
plot(x = cars$dist,y = cars$speed)
plot(x = cars$speed,y = cars$dist,xlab = "Speed")
plot(x = cars$speed,y = cars$dist,xlab = "Speed",ylab = "Stopping Distance")
plot(x = cars$speed,y = cars$dist,ylab = "Stopping Distance")
plot(x = cars$speed,y = cars$dist,xlab = "Speed",ylab = "Stopping Distance")
plot(x = cars$speed,y = cars$dist,main = "My Plot")
plot(cars,main = "My Plot")
plot(cars,main = "My Plot",sutitle = "My Plot Subtitle")
plot(cars,sub = "My Plot Subtitle")
plot(cars,col = 2)
plot(cars,xlim = c(10,15))
plot(cars,pch = 2)
data(mtcars)
?boxplot
boxplot(formula = mpg ~ cyl)
boxplot(formula = mpg ~ cyl,data = mtcars)
hist(mtcars$mpg)
rm(list = ls())
T == 1
0 == F
rep(c(0,3),each = 5)
library(swirl)
swirl()
View(dataFrame)
dist(dataFrame)
class(distxy)
hc <- hclust(distxy)
plot(hc)
plot(as.dendrogram(hc))
abline(h = 1.5, col = "blue")
abline(h = 0.4, col = "blue")
abline(h = 0.4, col = "red")
5
abline(h = 0.05, col = "green")
12
abline(h = 0.05, col = "green")
dist(dFsm)
hc
class(dataMatrix)
dim(dataMatrix)
heatmap(dataMatrix,col = cm.colors(25))
dim(mt)
heatmap(mt)
mt
class(denmt)
plot(denmt)
distmt
rm(list = ls())
library(swirl)
swirl()
5+5
download.file(url = "https://github.com/DataScienceSpecialization/courses/blob/master/04_ExploratoryAnalysis/kmeansClustering/K-meansClustering_169.pdf",
destfile = "C:/Users/RAUL/Desktop/PC/2.Estudio/6.Data_Science/Curso4_Exploratory_Data_Analysis/Week3/Material/k-meansClustering_169.pdf",
mode = "wb")
swirl()
cmat
points(x = cx,y = cy,col = c("red","orange","purple"),pch = 3,cex = 2, lwd = 2)
mdist(x = dataFrame$x,y = dataFrame$y,cx = cx,cy = cy)
mdist(x,y,cx,cy)
install.packages("packrat")
library(packrat)
swirl()
library(swirl)
swirl()
swirl()
swirl()
cmat
points(x = cx,y = cy,col = c("red","orange","purple"),pch = 3,cex = 2, lwd = 2)
mdist(x,y,cx,cy)
apply(distTmp,MARGIN = 2,FUN = which.min)
points(x = x,y = y,pch = 19,cex = 2, col = cols1[newClust])
tapply(X = x,INDEX = newClust,FUN = mean)
tapply(X = y,INDEX = newClust,FUN = mean)
points(x = newCx,y = newCy,col = cols1, pch = 8, cex = 2, lwd = 2)
mdist(x,y,newCx,newCy)
apply(X = distTmp2,MARGIN = 2,FUN = which.min)
points(x = x,y = y,pch = 19,cex = 2, col = cols1[newClust2]) # update the clusters
tapply(X = x,INDEX = newClust2,FUN = mean)
tapply(X = y,INDEX = newClust2,FUN = mean)
points(x = finalCx,y = finalCy,col = cols1,pch = 19, cex = 2,lwd = 2)
points(finalCx,finalCy,col = cols1,pch = 19, cex = 2,lwd = 2)
points(finalCx,finalCy,col = cols1,pch = 9, cex = 2,lwd = 2)
kmeans(x = dataFrame,centers = 3)
kmObj$iter
points(x = x,y = y,col = kmObj$cluster,pch = 19,cex = 2)
points(x,y,col = kmObj$cluster,pch = 19,cex = 2)
plot(x,y,col = kmObj$cluster,pch = 19,cex = 2)
points(kmObj$centers,col = c("black","red","green"),pch = 3, cex = 3, lwd = 3)
plot(x,y, col = kmeans(dataFrame,6)$cluster,pch = 19, cex = 2)
plot(x,y, col = kmeans(dataFrame,6)$cluster,pch = 19, cex = 2)
plot(x,y, col = kmeans(dataFrame,6)$cluster,pch = 19, cex = 2)
rm(list = ls())
load(file = "C:/Users/RAUL/Desktop/PC/3.Trabajo/3.Best/Paquetes2/ENAHOR/data/Modulo01.rda")
Modulo01 = data
save(Modulo01,file = "C:/Users/RAUL/Desktop/PC/3.Trabajo/3.Best/Paquetes2/ENAHOR/data/Modulo01.rda")
rm(list = ls())
load(file = "C:/Users/RAUL/Desktop/PC/3.Trabajo/3.Best/Paquetes2/ENAHOR/data/Modulo01.rda")
load(file = "C:/Users/RAUL/Desktop/PC/3.Trabajo/3.Best/Paquetes2/ENAHOR/data/Modulo02.rda")
Modulo02 = data
save(Modulo02,file = "C:/Users/RAUL/Desktop/PC/3.Trabajo/3.Best/Paquetes2/ENAHOR/data/Modulo02.rda")
load(file = "C:/Users/RAUL/Desktop/PC/3.Trabajo/3.Best/Paquetes2/ENAHOR/data/Modulo03.rda")
Modulo03 = data
save(Modulo03,file = "C:/Users/RAUL/Desktop/PC/3.Trabajo/3.Best/Paquetes2/ENAHOR/data/Modulo03.rda")
load(file = "C:/Users/RAUL/Desktop/PC/3.Trabajo/3.Best/Paquetes2/ENAHOR/data/Modulo04.rda")
Modulo04 = data
save(Modulo04,file = "C:/Users/RAUL/Desktop/PC/3.Trabajo/3.Best/Paquetes2/ENAHOR/data/Modulo04.rda")
load(file = "C:/Users/RAUL/Desktop/PC/3.Trabajo/3.Best/Paquetes2/ENAHOR/data/Modulo05.rda")
Modulo05 = data
save(Modulo05,file = "C:/Users/RAUL/Desktop/PC/3.Trabajo/3.Best/Paquetes2/ENAHOR/data/Modulo05.rda")
setwd("C:/Users/RAUL/Desktop/PC/3.Trabajo/3.Best/Paquetes2/ENAHOR")
roxygen2::roxygenise()
setwd("C:/Users/RAUL/Desktop/PC/3.Trabajo/3.Best/Paquetes2/ENAHOR")
roxygen2::roxygenise()
